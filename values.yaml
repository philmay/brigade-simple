# Name of the project, in the form "user/project"
project: "ctoarch/brigade-simple-github"

# Domain/Org/Project
repository: "github.com/philmay/brigade-simple"

# The definitive clone URL. This can be any Git-supported URL format.
# You may set this to "" for no clone URL.
cloneURL: "https://github.com/philmay/brigade-simple.git"

# Used by GitHub and other services to compute hook HMACs.
# sharedSecret: "IBrakeForSeaBeasts"

# OPTIONAL: Use this to have Brigade update your project about the build.
# You probably want this if you want pull requests or commits to show
# the build status.
# github: {}
#   token: "github oauth token"

# OPTIONAL: Use this for private repositories
# This is the PRIVATE key that Brigade will use to clone a private repo.
# You should generate a special key for this. Don't reuse another one.
# sshKey: |-
#  -----BEGIN RSA PRIVATE KEY-----
#  IIEpAIBAAKCAg1wyZD164xNLrANjRrcsbieLwHJ6fKD3LC19E...
#  ...
#  ...
#  -----END RSA PRIVATE KEY-----

# OPTIONAL: Items in the 'secrets' array can be mounted as environment variables by
# the brigade.js
#
# Example:
#
# In JS, do this:
#
#   events.push = function(e) {
#     j = new Job("example")
#     j.env= {"MY_ENV_VAR", e.secrets.myVar}
#   }
#
# And here, add this:
#
#   secrets:
#     myVar: "super awesome"
#
# Inside of the job's pod, $MY_ENV_VAR = "super awesome"
secrets: {}
# secrets:
#   writeStorage:
#     AccountName: orchestrationtest001
#     AccountKey: LJ+4CWzT1uATplHu0LB/ozWrnodvuBzAFPWLfGNjn0V+jVKqpRlUZO1wCOPj9otfzITGCHbfCfXor/LCdLGQLA==
#   readStorage:
#     AccountName: sandboxdata001
#     AccountKey: o3+YEtOxqXmcl5JdQpAwEl70YU7hLlPWJfd7xbab9PXCSjzQkFqE5Ls2WGud/CHZ1kBhVxGQcLcXAnxtof1KMA==

# OPTIONAL: Namespace into which builds will be deployed.
# Using this has implications for what you can access, so don't set this unless
# you know what you are doing.
# namespace: "default"

# OPTIONAL: vcsSidecar is the image that fetches a repo from a VCS
# vcsSidecar: "deis/git-sidecar:latest"


# Allow Jobs to run in privileged mode. This will allow features like
# Docker-in-Docker. This must be set to true before turning allowHostMounts
# on.
allowPrivilegedJobs: "true"

# OPTIONAL: Use this to allow host mounted docker sockets in your jobs.
# This is a big security risk if your project is public-facing; enable at your own risk.
# allowHostMounts: "true"

